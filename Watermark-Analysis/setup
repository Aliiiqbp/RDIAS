Train Data: DIV2K
Test Data: Mixed

Image Size for train and test: 128
Message Size: 16

Metrics:
    Visual Quality: PSNR, SSIM, LPIPS(net=alex)
    Robustness: Average Bit Accuracy for each pair of "Transformation-Parameter"



Transformations and Parameters:
################################################################


import numpy as np
import cv2
from PIL.ImageOps import cover
from skimage.metrics import structural_similarity as ssim
from skimage.metrics import peak_signal_noise_ratio as psnr
from PIL import Image, ImageFilter, ImageEnhance, ImageOps
import io
import random
import os
from trustmark import TrustMark
import csv
import torch
import imagehash


from lpips import LPIPS
lpips_net = LPIPS(net='alex')

def apply_jpeg_compression(image, quality):
    buffer = io.BytesIO()
    image.save(buffer, format="JPEG", quality=quality)
    return Image.open(buffer)

def apply_webp_compression(image, quality):
    buffer = io.BytesIO()
    image.save(buffer, format="WEBP", quality=quality)
    return Image.open(buffer)

def apply_jpeg2000_compression(image, quality):
    buffer = io.BytesIO()
    image.save(buffer, format="JPEG2000", quality=quality)
    return Image.open(buffer)

def apply_resize(image, scale):
    return image.resize((int(image.width * scale), int(image.height * scale)), Image.LANCZOS)

def apply_gaussian_noise(image, sigma):
    noisy_image = np.array(image)
    noise = np.random.normal(0, sigma, noisy_image.shape)
    noisy_image = np.clip(noisy_image + noise, 0, 255).astype(np.uint8)
    return Image.fromarray(noisy_image)

def apply_saturation(image, level):
    enhancer = ImageEnhance.Color(image)
    return enhancer.enhance(level)

def apply_brightness(image, level):
    enhancer = ImageEnhance.Brightness(image)
    return enhancer.enhance(level)

def apply_contrast(image, level):
    enhancer = ImageEnhance.Contrast(image)
    return enhancer.enhance(level)

def apply_sharpness(image, level):
    enhancer = ImageEnhance.Sharpness(image)
    return enhancer.enhance(level)

def apply_gaussian_blur(image, radius):
    return image.filter(ImageFilter.GaussianBlur(radius))

def apply_median_blur(image, size):
    return image.filter(ImageFilter.MedianFilter(size))

def apply_average_filter(image, size):
    return image.filter(ImageFilter.BoxBlur(size))


def calculate_metrics(original_image, watermarked_image):
    original = np.array(original_image)
    watermarked = np.array(watermarked_image)
    psnr_value = psnr(original, watermarked)
    ssim_value = ssim(original, watermarked, multichannel=True, win_size=3)

    # Convert numpy arrays to PyTorch tensors for LPIPS
    original_tensor = torch.tensor(original).permute(2, 0, 1).unsqueeze(0).float() / 255.0
    watermarked_tensor = torch.tensor(watermarked).permute(2, 0, 1).unsqueeze(0).float() / 255.0
    # Calculate LPIPS
    lpips_value = lpips_net(original_tensor, watermarked_tensor).item()

    return psnr_value, ssim_value, lpips_value

transformations = {
    "JPEG": [50, 70, 90],
    "WebP": [50, 70, 90],

    "Resize": [0.5, 0.75, 1.5],

    "GaussianNoise": [0.02, 0.04, 0.08],

    "Saturation": [0.5, 1.5, 2.0],
    "Brightness": [0.5, 1.5, 2.0],
    "Contrast": [0.5, 1.5, 2.0],
    "Sharpness": [0.5, 1.5, 2.0],

    "GaussianBlur": [1, 3, 5],
    "MedianBlur": [1, 3, 5],
    "AverageFilter": [1, 3, 5]

    ########## JUST TO TEST IF ALL TRANSFORMATIONS WORKS PROPERLY ###########
    # "JPEG": [50],
    # "Resize": [0.25],
    # "GaussianNoise": [10],
    # "WebP": [50],
    # "JPEG2000": [50],
    # "Saturation": [0.5],
    # "Brightness": [0.5],
    # "Contrast": [0.5],
    # "Sharpness": [0.5]
}
